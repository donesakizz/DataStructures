#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

// Bu dökümanda 11., 12. ve 13. bölümler   onlar eksiktir.Tamamlanmadı


struct node{
int data;
struct node *next;
};

struct node* BasaEkle(struct node *head, int data){
struct node *temp=(struct node *)malloc(sizeof(struct node));
temp->data=data;
temp->next=head;
head=temp;
return head;
}

void SonaEkle(struct node *head, int data){
if(head==NULL){
    printf("Liste Boþ iken Sona Ekleme Yapamazsýnýz...\n");
    return;
}
struct node *temp=(struct node *)malloc(sizeof(struct node));
temp->data=data;
temp->next=NULL;
struct node *temp2=head;
while(temp2->next!=NULL)
    temp2=temp2->next;
temp2->next=temp;
}

void OrtayaEkle(struct node* head, int data, int index){
if(head==NULL){
    printf("Liste Boþ iken Sona Ekleme Yapamazsýnýz...\n");
    return;
}
struct node *temp=(struct node *)malloc(sizeof(struct node));
struct node *temp2=head;
while(temp2->data!=index)
    temp2=temp2->next;
temp->data=data;
temp->next=temp2->next;
temp2->next=temp;
}

void ListeyiYazdir(struct node *head){
if(head==NULL){
    printf("Listede Eleman Yok..");
    return;
    }
    printf("Listenin Elamanlarý:   \n");
    printf("__________________________________\n");
    struct node* temp=head;
    while(temp!=NULL){
        printf("%d  ",temp->data);
        temp=temp->next;
    }
    printf("\n");
}

void ElamanDuzenle(struct node* head, int data, int index){
if(head==NULL){
    printf("Liste Boþ iken Sona Ekleme Yapamazsýnýz...\n");
    return;
}
struct node *temp=head;
while(temp->data!=index)
    temp=temp->next;
temp->data=data;
}

struct node* ElemanSil(struct node* head, int data){
if(head==NULL){
    printf("Liste Boþ iken Silme Ýþlemi Yapamazsýnýz...\n");
    return;
}
struct node* temp=head;
if(head->data==data){
    head=head->next;
    free(temp);
}
else{
    while(temp->next->data!=data){
            if(temp->next->next==NULL){
                printf("Silmek istediðiniz veri bulunamadý...\n");
                return head;
            }
            temp=temp->next;
    }
        struct node *temp2 = temp -> next;
        temp -> next = temp -> next -> next;
        free(temp2);
}
    return head;
}

struct node * listeyiBosalt(struct node* head){
if(head==NULL){
    printf("Liste Zaten Boþ.");
    return;
    }
struct node * temp;
while(head!=NULL){
        temp=head;
        printf("bgbgf");
        head=head->next;
        free(temp);
}
return head;
}

int elemanSayisi(struct node* head){
int sayac=0;
while(head!=NULL){
    head=head->next;
    sayac++;
}
return sayac;
}

void listeBilgisiYazdir(struct node* head){
int sayac=1;
while(head!=NULL){
    printf("Listenin %d . elemanýnýn adresi=%p\n",sayac,head);
    printf("Listenin %d . elemanýnýn deðeri=%d\n",sayac,head->data);
    printf("Listenin %d . elmanýna baðlý olan liste adresi= %p\n",sayac,head->next);
    printf("____________________________________________________\n",sayac,head->next);
    sayac++;
    head=head->next;
}
}
int main()
{
    setlocale(LC_ALL,"Turkish");
    int secim,data,index;
    struct node *head=NULL;

    while(1){
    printf("-----Aþaðýdaki iþlemlerden birini seçiniz...---\n");
    printf("1-Listenin Baþýna Eleman Ekleme\n");
    printf("2-Listenin Sonuna Eleman Ekleme\n");
    printf("3-Listenin Ortasýna Eleman Ekleme\n");
    printf("4-Elemanlarý Listele\n");
    printf("5-Verilen Adresteki elemaný Düzenle\n");
    printf("6-Listenden Ýstenilen Elamaný Sil\n");
    printf("7-Listeyi Sil\n");
    printf("8-Listenin Eleman Sayýsý\n");
    printf("9-Listenin Tüm elemanlarýnýn Bilgilerini Yazdýr\n");
    printf("10-Listede arama yapmak\n");
    printf("11-Listenin Elamanlarını Tersten Yazdır\n");
    printf("12-Listenin Kopyasını Oluştur\n");
    printf("13-Listeleri birbirine Ekle\n");
    printf("14-Programdan Çýk\n");
    scanf("%d", &secim);

            switch(secim){
                case 1:printf("Lütfen Eklemek Ýstediðiniz Deðeri Giriniz...");
                    scanf("%d",&data);
                    head=BasaEkle(head,data);
                    break;
                case 2:printf("Lütfen Eklemek Ýstediðiniz Deðeri Giriniz...");
                    scanf("%d",&data);
                    SonaEkle(head,data);
                    break;
                case 3:printf("Lütfen Eklemek Ýstediðiniz Deðeri Giriniz...");
                    scanf("%d",&data);
                    printf("Lütfen Ekleme Yapýlacak Posizyon Bilgisini Giriniz.....");
                    scanf("%d",&index);
                    OrtayaEkle(head,data,index);
                    break;
                case 4:ListeyiYazdir(head);
                    break;
                case 5:printf("Lütfen Deðiþtirmek Ýstediðiniz Yeni Deðeri Giriniz...");
                    scanf("%d",&data);
                    printf("Lütfen Deðeri Deðiþtirilmek Ýstenen Posizyon Bilgisini Giriniz.....");
                    scanf("%d",&index);
                    ElamanDuzenle(head,data,index);
                    break;
                case 6:printf("Lütfen Silmek Ýstediðiniz Elmanýn Deðerini Giriniz...");
                    scanf("%d",&data);
                    head=ElemanSil(head,data);
                    break;
                case 7:head=listeyiBosalt(head);
                    break;
                case 8: printf("Listenin Elaman Sayýsý=%d", elemanSayisi(head));
                    break;
                case 9: listeBilgisiYazdir(head);
                    break;
                case 10:
                    break;
                case 11:
                    break;
                case 12:
                    break;
                case 13:
                    break;
                case 14:exit(0);
                    break;
                default: printf("Yanlis secim\n");
            }
    }

    return 0;
}

